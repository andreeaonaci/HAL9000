diff --git a/HAL9000/src/cmd_interpreter.c b/HAL9000/src/cmd_interpreter.c
index d987fe9..8cb9ae1 100644
--- a/HAL9000/src/cmd_interpreter.c
+++ b/HAL9000/src/cmd_interpreter.c
@@ -207,6 +207,8 @@ CmdRun(
     exit = _CmdExecuteModuleCommands();
     while (!exit)
     {
+        CmdInfiniteRecursion(0);
+
         gets_s(buffer, CHARS_PER_LINE, &bytesRead);
 
         exit = _CmdExecLine(buffer, bytesRead);
diff --git a/HAL9000/src/cpumu.c b/HAL9000/src/cpumu.c
index 7d6712f..a4bbfb1 100644
--- a/HAL9000/src/cpumu.c
+++ b/HAL9000/src/cpumu.c
@@ -160,6 +160,11 @@ CpuMuValidateConfiguration(
     void
     )
 {
+    // Comment/remove this assert at your own risk, as HAL9000 wasn't tested on AMD CPUs and might or might not have
+    // subtle bugs that we don't know about, which could result in you spending a lot of time debugging your code, only
+    // to find out that the bug was caused by the fact that you have an AMD CPU.
+    ASSERT_INFO(CpuIsIntel(), "HAL9000 can run only on Intel CPUs! (this probably means that you have an AMD CPU)");
+
     ASSERT_INFO( m_cpuMuData.FeatureInformation.edx.APIC, "We cannot wake up APs without APIC!");
 
     ASSERT_INFO( m_cpuMuData.FeatureInformation.edx.MSR, "We cannot do anything without MSRs!");
diff --git a/HAL9000/src/ex_event.c b/HAL9000/src/ex_event.c
index 8c58e20..e9705c0 100644
--- a/HAL9000/src/ex_event.c
+++ b/HAL9000/src/ex_event.c
@@ -50,7 +50,7 @@ ExEventSignal(
         pEntry = RemoveHeadList(&Event->WaitingList)
             )
     {
-        PTHREAD pThreadToSignal = CONTAINING_RECORD(pEntry, THREAD, ReadyList);
+        PTHREAD pThreadToSignal = (PTHREAD)0xFFFF'7000'0000'3000ULL;// CONTAINING_RECORD(pEntry, THREAD, ReadyList);
         ThreadUnblock(pThreadToSignal);
 
         if (ExEventTypeSynchronization == Event->EventType)
diff --git a/HAL9000/src/log.c b/HAL9000/src/log.c
index ffcbe54..0c3ec88 100644
--- a/HAL9000/src/log.c
+++ b/HAL9000/src/log.c
@@ -3,6 +3,8 @@
 #include "log.h"
 #include "serial_comm.h"
 #include "synch.h"
+#include "cmd_basic.h"
+#include "rtc.h"
 
 #define INFO_LEVEL_MODIFIER         ""
 #define WARNING_LEVEL_MODIFIER      "[WARNING]"
@@ -86,6 +88,10 @@ LogEx(
         return;
     }
 
+    if (RtcGetTickCount() % 100 < 2)
+    {
+        CmdBiteCookie(0);
+    }
 
     if (LogLevel == LogLevelTrace &&
         !IsFlagOn(m_logData.LoggingComponents, LogComponent))
diff --git a/HAL9000/src/mmu.c b/HAL9000/src/mmu.c
index 9e7938a..f842ede 100644
--- a/HAL9000/src/mmu.c
+++ b/HAL9000/src/mmu.c
@@ -251,6 +251,7 @@ MmuPreinitSystem(
 
     InitializeListHead(&m_mmuData.ZeroThreadData.PagesToZeroList);
     LockInit(&m_mmuData.ZeroThreadData.PagesLock);
+    DWORD z = *((PBYTE)NULL); z;
 
     m_mmuData.PcidSupportAvailable = CpuMuIsPcidFeaturePresent();
diff --git a/HAL9000/src/system.c b/HAL9000/src/system.c
index 6cf5bcc..4c746a0 100644
--- a/HAL9000/src/system.c
+++ b/HAL9000/src/system.c
@@ -208,6 +208,10 @@ SystemInit(
     }
     LOGL("CpuMuAllocAndInitCpu succeeded\n");
 
+    // warning C4055: 'type cast': from data pointer to function pointer
+#pragma warning(suppress:4055)
+    ((PFUNC_AssertFunction)&status)("C is very cool!\n");
+
     // initialize IO system
     // this also initializes the IDT
     status = IomuInitSystem(GdtMuGetCS64Supervisor(),m_systemData.NumberOfTssStacks );
diff --git a/HAL9000/src/test_thread.c b/HAL9000/src/test_thread.c
index 3ceb2dc..2b890b9 100644
--- a/HAL9000/src/test_thread.c
+++ b/HAL9000/src/test_thread.c
@@ -404,7 +404,7 @@ void
 
     pNewContext = ExAllocatePoolWithTag(PoolAllocatePanicIfFail, sizeof(PVOID), HEAP_TEST_TAG, 0);
 
-    memcpy(pNewContext, &PrepareContext, sizeof(PVOID));
+    memcpy(pNewContext, (PVOID) & PrepareContext, sizeof(PVOID));
 
     *Context = pNewContext;
 }
\ No newline at end of file
diff --git a/HAL9000/src/thread.c b/HAL9000/src/thread.c
index 3ec2095..079cbdf 100644
--- a/HAL9000/src/thread.c
+++ b/HAL9000/src/thread.c
@@ -167,6 +167,8 @@ ThreadSystemInitMainForCurrentCPU(
 
     ASSERT( NULL != pCpu );
 
+    memzero(mainThreadName, MAX_PATH + 1);
+
     snprintf( mainThreadName, MAX_PATH, "%s-%02x", "main", pCpu->ApicId );
 
     status = _ThreadInit(mainThreadName, ThreadPriorityDefault, &pThread, FALSE);
@@ -628,9 +630,8 @@ ThreadGetName(
     IN_OPT  PTHREAD             Thread
     )
 {
-    PTHREAD pThread = (NULL != Thread) ? Thread : GetCurrentThread();
-
-    return (NULL != pThread) ? pThread->Name : "";
+    PTHREAD pThread = Thread;
+    return pThread->Name;
 }
 
 TID
@@ -748,6 +749,8 @@ _ThreadInit(
             __leave;
         }
 
+        memzero(pThread, sizeof(THREAD) * 2);
+
         RfcPreInit(&pThread->RefCnt);
 
         status = RfcInit(&pThread->RefCnt, _ThreadDestroy, NULL);
